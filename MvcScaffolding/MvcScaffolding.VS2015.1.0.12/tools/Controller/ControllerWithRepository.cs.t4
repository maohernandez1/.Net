<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
namespace <#= Model.ControllerNamespace #>
{  
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Web.Mvc;
	<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
	using <#= Model.ModelTypeNamespace #>;
	<# } #>
	<# if((!string.IsNullOrEmpty(Model.ServiceNamespace)) && (Model.ServiceNamespace != Model.ModelTypeNamespace)) { #>
	using <#= Model.ServiceNamespace #>;
	<# } #>
	using Commons.Helpers.Implementations;
 
<#  
	var modelType = (CodeType)Model.ModelType; 
	var modelName = modelType.Name; 
	var modelNamePlural = Model.ModelTypePluralized; 
	var modelVariable = modelName.ToLower(); 
	var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
	var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
	var routingName = Regex.Replace(Model.ControllerName, "Controller$", "", RegexOptions.IgnoreCase);
	var serviceInterfaceName = "_i" + modelName + "Service";
#>
    public class <#= Model.ControllerName #> : BaseController<GlobalHub>
    {
<# foreach(var serviceItem in Service.Values) { #>
		private readonly I<#= serviceItem.ServiceTypeName #> _i<#= serviceItem.ServiceTypeName #>;
<# } #>

		// If you are using Dependency Injection, you can delete the following constructor
        //public <#= Model.ControllerName #>() : this(<#= String.Join(", ", Service.Values.Select(x => "new " + x.ServiceTypeName + "()")) #>)
        //{
        //}

        public <#= Model.ControllerName #>(<#= String.Join(", ", Service.Values.Select(x => "I" + x.ServiceTypeName + " " + x.VariableName)) #>)
        {
<# foreach(var serviceItem in Service.Values) { #>
			_i<#= serviceItem.ServiceTypeName #> = <#= serviceItem.VariableName #>;
<# } #>
        }

        //
        // GET: /<#= routingName #>/

        public ViewResult Index()
        {
<#
	var propertiesToInclude = relatedEntities.Select(relation => relation.LazyLoadingProperty).Where(x => x != null);
	var includeExpression = String.Join(", ", propertiesToInclude.Select(x => String.Format("{0} => {0}.{1}", modelVariable, x.Name)));
	if (!string.IsNullOrEmpty(includeExpression)) {
		includeExpression = "Including(" + includeExpression + ")";
	}
#>
            //return View(<#= serviceInterfaceName #>.GetAllTest<#= includeExpression #>);
			return View();
        }

        //
        // GET: /<#= routingName #>/Details/5

        public ViewResult Details(<#= primaryKeyProperty.Type.AsString #> id)
        {
            return View(<#= serviceInterfaceName #>.Get<#= modelName #>ByProperties(_ => _.<#= Model.PrimaryKey#> == id));
        }

        //
        // GET: /<#= routingName #>/Create

        public ActionResult Create()
        {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
			ViewBag.<#= relatedEntity.RelationNamePlural #> = _i<#= Service[relatedEntity.RelatedEntityType.FullName].ServiceTypeName #>.GetAll<#= relatedEntity.RelationNamePlural #>();
<# } #>
            return View();
        } 

        //
        // POST: /<#= routingName #>/Create

        [HttpPost]
        public ActionResult Create(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid) {
                <#= serviceInterfaceName #>.Add<#= modelName #>(<#= modelVariable #>);
                <#= serviceInterfaceName #>.Commit<#= modelName #>();
                return Json(new { id = 0, message = "Guardado exitosamente" });
            } else {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
				ViewBag.<#= relatedEntity.RelationNamePlural #> = _i<#= Service[relatedEntity.RelatedEntityType.FullName].ServiceTypeName #>.GetAll<#= relatedEntity.RelationNamePlural #>();
<# } #>
				return Json(new { id = -1, message = "Ha ocurrido un error" });
			}
        }
        
        //
        // GET: /<#= routingName #>/Edit/5
 
        public ActionResult Edit(<#= primaryKeyProperty.Type.AsString #> id)
        {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
			ViewBag.<#= relatedEntity.RelationNamePlural #> = _i<#= Service[relatedEntity.RelatedEntityType.FullName].ServiceTypeName #>.GetAll<#= relatedEntity.RelationNamePlural #>();
<# } #>
			 var entity<#= modelName #> = <#= serviceInterfaceName #>.Get<#= modelName #>ByProperties(_ => _.<#= Model.PrimaryKey#> == id);
			 if(entity<#= modelName #> is <#= modelName #>)
			 {
				return View(entity<#= modelName #>);
			 }
			 else
			 {
				return View("~/Views/Error/NotFound.cshtml");
			 }             
        }

        //
        // POST: /<#= routingName #>/Edit/5

        [HttpPost]
        public ActionResult Edit(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid) {
                <#= serviceInterfaceName #>.Modify<#= modelName #>(<#= modelVariable #>);
                <#= serviceInterfaceName #>.Commit<#= modelName #>();
                //return RedirectToAction("Index");
				return Json(new { id = 0, message = "Actualizado exitosamente" });
            } else {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
				ViewBag.<#= relatedEntity.RelationNamePlural #> = _i<#= Service[relatedEntity.RelatedEntityType.FullName].ServiceTypeName #>.GetAll<#= relatedEntity.RelationNamePlural #>();
<# } #>
				//return View();
				return Json(new { id = -1, message = "Ha ocurrido un error" });
			}
        }

        //
        // GET: /<#= routingName #>/Delete/5
 
        public ActionResult Delete(<#= primaryKeyProperty.Type.AsString #> id)
        {
            return View(<#= serviceInterfaceName #>.Get<#= modelName #>ByProperties(_ => _.<#= Model.PrimaryKey#> == id));
        }

        //
        // POST: /<#= routingName #>/Delete/5

        [HttpPost, ActionName("Delete")]
        public ActionResult DeleteConfirmed(<#= primaryKeyProperty.Type.AsString #> id)
        {
			object response = null;
            var <#= modelVariable #> = <#= serviceInterfaceName #>.Get<#= modelName #>ByProperties(_ => _.<#= Model.PrimaryKey#> == id);

			if(<#= modelVariable #> is <#= modelName #>)
			{
				<#= serviceInterfaceName #>.Remove<#= modelName #>(<#= modelVariable #>);
				<#= serviceInterfaceName #>.Commit<#= modelName #>();

				response = new { id = 0, message = "Borrado exitosamente" };
			}
			else
			{
				response = new { id = -1, message = "El registro que desea eliminar no existe" };
			}

			return Json(response);
            //return RedirectToAction("Index");
        }
		
		public JsonResult GetGrid<#= modelName #>(SearchGrid search)
        {
            IEnumerable<<#= modelName #>> grid<#= modelName #> = new List<<#= modelName #>>();
            bool esDescending = false;
            if (search.Current == 1)
            {
                search.Current = 0;
            }
            if (search.Sort is Dictionary<string, string> && search.Sort.Count > 0)
            {
                //order by selected parameter
                var sorting = search.Sort.FirstOrDefault();
                var propertyInfo = typeof(<#= modelName #>).GetProperty(sorting.Key);
                esDescending = sorting.Value.Equals("asc") ? false : true;
                grid<#= modelName #> = <#= serviceInterfaceName #>.GetAll<#= modelName #>();
                grid<#= modelName #> = esDescending ? grid<#= modelName #>.OrderBy(x => propertyInfo.GetValue(x, null)) : grid<#= modelName #>.OrderByDescending(x => propertyInfo.GetValue(x, null));
            }
            else
            {
                grid<#= modelName #> = <#= serviceInterfaceName #>.GetPaged<#= modelName #>(search.Current, search.RowCount, x => x.<#= primaryKeyProperty.Name #>, false);
            }
            return Json(new { total = grid<#= modelName #>.Count(), rows = grid<#= modelName #>, current = search.Current, rowCount = search.RowCount }, JsonRequestBehavior.AllowGet);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing) {
<# foreach(var repository in Service.Values) { #>
                <#= serviceInterfaceName #>.Dispose();
<# } #>
            }
            base.Dispose(disposing);
        }
    }
}

<#+
class ServiceInfo {
    public string ServiceTypeName { get; set; }
    public string VariableName { get; set; }
}

IDictionary<string, ServiceInfo> _Service;
IDictionary<string, ServiceInfo> Service {
	get {
		if (_Service == null) {
			var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
			var relatedTypes = relatedEntities.Where(x => x.RelationType == RelationType.Parent).Select(x => x.RelatedEntityType).Distinct();
			_Service = relatedTypes.ToDictionary(
				relatedType => relatedType.FullName,
				relatedType => new ServiceInfo { ServiceTypeName = relatedType.Name + "Service", VariableName = relatedType.Name.ToLower() + "Service" }
			); 
			_Service[((CodeType)Model.ModelType).FullName] = new ServiceInfo { ServiceTypeName = Model.Service, VariableName = ((CodeType)Model.ModelType).Name.ToLower() + "Service" };
		}
		return _Service;
	}
}
#>