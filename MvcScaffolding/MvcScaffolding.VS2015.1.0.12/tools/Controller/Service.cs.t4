<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ Output Extension="cs" #>

namespace <#=Model.ProjectName#>.Manager.Implementation
{
	using Core.Models;
	using Core.Interfaces;
	using Manager.Interfaces;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
<# 
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
    var contextName = ((CodeType)Model.DbContextType).Name; 
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
    var isObjectContext = ((CodeType)Model.DbContextType).IsAssignableTo<System.Data.Objects.ObjectContext>();
	var modelVariable = modelName.ToLower(); 
#>
    public class <#=modelName#>Service : I<#=modelName#>Service
    {
        private readonly I<#=modelName#>Repository _i<#=modelName#>Repository;

        public <#=modelName#>Service(I<#= modelName #>Repository i<#= modelName #>Repository)
        {
            _i<#= modelName #>Repository = i<#= modelName #>Repository;
        }

        public void Add<#= modelName #>(<#= modelName #> <#= modelVariable #>)
        {
            _i<#= modelName #>Repository.Add(<#= modelVariable #>);
        }

        public int Commit<#= modelName #>()
        {
            return _i<#= modelName #>Repository.UnitOfWork.Commit();
        }

        public void Dispose()
        {
            _i<#= modelName #>Repository.Dispose();
        }

        public IQueryable<<#= modelName #>> GetAll<#= modelName #>(Expression<Func<<#= modelName #>, object>>[] includeExpression = null)
        {
            return _i<#= modelName #>Repository.GetAll();
        }

        public <#= modelName #> Get<#= modelName #>ByProperties(Expression<Func<<#= modelName #>, bool>> predicate, Expression<Func<<#= modelName #>, object>>[] includeExpressions = null)
        {
            return _i<#= modelName #>Repository.Get(predicate, includeExpressions);
        }
		
		public IQueryable<<#= modelName #>> GetPaged<#= modelName #><Property>(int pageIndex, int pageCount, Expression<Func<<#= modelName #>, Property>> orderByExpression, bool ascending)
        {
            return _i<#= modelName #>Repository.GetPaged(pageIndex, pageCount, orderByExpression, ascending);
        }

        public void Modify<#= modelName #>(<#= modelName #> <#= modelVariable #>)
        {
            _i<#= modelName #>Repository.Modify(<#= modelVariable #>);
        }

        public void Remove<#= modelName #>(<#= modelName #> <#= modelVariable #>)
        {
            _i<#= modelName #>Repository.Remove(<#= modelVariable #>);
        }
    }
}