<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ Output Extension="cs" #>
using <#=Model.ProjectName#>.Core.Models;
using <#=Model.ProjectName#>.Core.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Linq.Expressions;
namespace <#=Model.ProjectName#>.Manager.Interfaces
{ 
<# 
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
    var contextName = ((CodeType)Model.DbContextType).Name; 
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
    var isObjectContext = ((CodeType)Model.DbContextType).IsAssignableTo<System.Data.Objects.ObjectContext>();
	var modelVariable = modelName.ToLower(); 
#>
    public interface I<#= modelName #>Service
    {
		IQueryable<<#= modelName #>> GetAll<#= modelName #>(Expression<Func<<#= modelName #>, object>>[] includeExpression = null);
		
		IQueryable<<#= modelName #>> GetPaged<#= modelName #><Property>(int pageIndex, int pageCount, Expression<Func<<#= modelName #>, Property>> orderByExpression, bool ascending);

        <#= modelName #> Get<#= modelName #>ByProperties(Expression<Func<<#= modelName #>, bool>> predicate, Expression<Func<<#= modelName #>, object>>[] includeExpressions = null);

        int Commit<#= modelName #>();

        void Remove<#= modelName #>(<#= modelName #> <#= modelVariable #>);

        void Add<#= modelName #>(<#= modelName #> <#= modelVariable #>);

        void Modify<#= modelName #>(<#= modelName #> <#= modelVariable #>);

        void Dispose();
    }
}
